## 1. How to Flatten An Array

The code below defines a JavaScript function called `flatten` that takes a nested array as input and transforms it into a single-level array containing all the numbers from the input array.

### Example:

```javascript
// input -> nested array
let input = [1, 2, 3, [4, 5], [6, 7, 8, [9, 10, 11]]];
// output -> single level of array with numbers
// Expected Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]

```function flatten(srcArr) {
    let newArr = [];
    for (let i = 0; i < srcArr.length; i++) {
        // check if elemnt -> array -> 
        let elem = srcArr[i];
        let isElemArr = Array.isArray(elem);
        if (isElemArr) {
            // flatten it again
            let smalleFlattenArr = flatten(elem);
            newArr.push(...smalleFlattenArr);
        } else {
            //push it to newArr;
            newArr.push(elem);
        }
    }
    return newArr;
}
let flattenedArr = flatten(input);
console.log(flattenedArr);```

// Output:
// [
//    1, 2, 3, 4,  5,
//    6, 7, 8, 9, 10,
//   11
// ]
Note: The question that will be asked in interviews is how does Array.prototype.flat() method works. We would be asked to write a code to create a method over Array object so that every array would get their own flatten function that has the option of levels also

Answer: It works the same way as the flatten function with one difference which is we can pass the levels inside it like 1,2. If we pass 1 as parameter it would remove the first layer and when we provide 2 it would remove 2 layers it is ideak to use Infinity when we want to remove all the layers. An example is shown below

Example:

```let input = [1, 2, 3, [4, 5], [6, 7, 8, [9, 10, 11]]];

let flattenOutput = input.flat(Infinity);
console.log(flattenOutput); ```
// Ouput:
// [
//    1, 2, 3, 4,  5,
//    6, 7, 8, 9, 10,
//   11
// ]
Questions which can be asked based on this flatten a array are

simple deep clone/copy
deep copy /clone with nested objects and array HW
flatten an array
Array.prototype.flat() HW

2. flatten an object:

Object before flattening

```let person = {
    firstName: 'John',
    lastName: 'Doe',
    address: {
        street: 'North 1st street',
        city: 'San Jose',
        state: 'CA',
        country: 'USA',
        postCodes: {
            firstBlock: 10,
            secondBlock: 12
        }
    }
}```

Object after flatening

```person = {
    firstName: 'John',
    lastName: 'Doe',
    "address.street": 'North 1st street',
    "address.city": 'San Jose',
    "address.state": 'CA',
    "address.country": 'USA',
    "address.postCodes.firstBlock": 10,
    "address.postCodes.secondBlock": 12
}```

Implementation:
---------------

```const flattenObject = (obj, delimiter = '.', parentKey = '') => {
  // Step 1: Initialize an empty object
  const flattened = {};
  
  // Step 2: Iterate over object keys
  for (const key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      
      // Step 4: Construct keys
      const newKey = parentKey ? `${parentKey}${delimiter}${key}` : key;
      
      // Step 3: Check for nested objects
      if (typeof obj[key] === 'object' && obj[key] !== null) { 
        // Step 5: Merge results
        Object.assign(flattened, flattenObject(obj[key], delimiter, newKey));
      } else {
        // Step 3: Add leaf values
        flattened[newKey] = obj[key];
      }
    }
  }
  // Step 6: Return flattened object
  return flattened;
}

// Usage of flattenObject:
// Flatten the nestedObject
const flattenedObject = flattenObject(nestedObject);
console.log(flattenedObject);```

## 3. Creating objects in JS:

In JavaScript, objects are non-primitive data types that allow you to store multiple collections of data.

**Example:**

```javascript
const candidate = { 
    firstName: 'Muthu', 
    class: 12
};
console.log(candidate.firstName) // Output: Muthu
console.log(candidate.class) // Output : 12
```

In this case, candidate is an object that stores strings and numbers as part of its values.

### 3.1 Using Object Literals

JavaScript's simplest method of creating an object is to initialize it. 

Defining and creating an object can be done in a single line. 

A key-value pair phenomenon is used to assign values separated by commas. 

Values are assigned in curly braces:

**Syntax**

```javascript
var object = {
   propertyName:propertyValue
}
```

A property name refers to the name of the property, and a property value refers to its value.

**Example:**

```javascript
// Creating an object using Object literals
var candidate = {
    firstName:"Muthu",
    lastName:"Annamalai"
};
console.log(candidate.firstName); // Output: Muthu
```

**Code Explanation:**

* A candidate object is defined, and various properties are assigned to it.
* These properties are then assigned different values.
* Using JavaScript's console.log() method, candidate.firstName is finally displayed.

### 3.1.1 How are we able to use methods on primitive data types even though have no method or properties associated with them

* Although primitive types don't have methods, except for null and undefined, there are object equivalents that wrap the primitive values, so we can use methods on them.
* For string primitives, there's String, for number primitives, there's Number, and for others, there's Boolean, BigInt, and Symbol.
* When a method is called, Javascript automatically converts primitives into their corresponding objects. The Javascript wraps the primitive and calls the method.
* Here's how a String object looks with its primitive value and proto (which is outside of our scope here but is related to the prototype of its object) 
![strings](https://d2beiqkhq929f0.cloudfront.net/public_assets/assets/000/049/338/original/upload_f47ee274ac33fc6aae53d606a4270608.png?1695156454)
* This is how we can access properties like length and methods like indexOf and substring when we work with string primitives.
* Whenever Javascript finds an object that should have a primitive value, it calls the valueOf method to convert it back to a primitive value.
![valueOf method JavaScript](https://d2beiqkhq929f0.cloudfront.net/public_assets/assets/000/049/339/original/upload_fd7011ea0f29ba0da374e38482fc2b2e.png?1695156559)


### 3.2 Using Object.create()

Object.create() creates a new object and links it to the prototype of an existing object.

**Syntax:**

**Object.create(proto, propertiesObject)**

The create() method takes in:

* proto - Represents the prototype of new object.
* propertiesObject (optional) - It is used to specify which property descriptors should be added to the newly-created object. 

```javascript
// creating the prototype for the object that will be created later
function greeting() {
   this.greeting = 'Hello Muthu!';
}
// using the object.create() method to create a function whose object inherits properties from the prototype
function greetMuthu() {
   greeting.call(this);
}
// creating an greetMuthu function object with the prototype object's properties (such as greeting)
greetMuthu.prototype = Object.create(greeting.prototype);
const app = new greetMuthu();
// Displaying the object created
console.log(app.greeting); //Output : Hello Muthu!
```

In this example, there are two functions “greeting” and “greeetMuthu”.

We have created a new greetMuthu instance named "app" with a prototype and property of "greeting", e.g. this.greeting = 'Hello World'.

#### 3.2.1 Creating an object without any parent

We can create an object without any parent by using the below synatx

`var a = Object.create(null)`

This creates an object that doesn't inherit anything, i.e., an empty object with no prototype.
![Creating an object without any parent](https://d2beiqkhq929f0.cloudfront.net/public_assets/assets/000/049/340/original/upload_cb3c5905fad2c6082695cf2a776bf8c9.png?1695156588)

#### 3.2.2 Creating an object from another object

An example of how to create an object from another object is shown below

```javascript
let candidate = {
    name: "Muthu",
    age: 24,
    job: "developer"
}
let pickNameAndAge = function(record) {
  return {
    name: record.name,
    age: record.age
  }
}
let muthu = pickNameAndAge(candidate)
console.log(muthu) // Output : { name: 'Muthu', age: 24 }
```

#### 3.2.3 How to iterate using for in loop 

A for...in statement iterates over an object's properties. We will make a simple candidate object with a few name:value pairs to demonstrate.

```javascript
const candidate = {
  firstName: "Muthu",
  lastName: "Annamalai"
}
```

By using a for...in loop, we can access the names of all the properties easily.

```javascript
// It will print the property names of candidate object
for (attribute in candidate) {
   console.log(attribute); // Output : firstName,lastName
}
```

By using the property name as the object's index value, we can also access each property's value.

```javascript
// It will print the property values of object
for (attribute in candidate) {
   console.log(candidate[attribute]); //Output : Muthu, Annamalai
}
```
Using them together, we can access an object's names and values.

```javascript
// It will print the names and values of object properties
for (attribute in candidate) {
   console.log(`${attribute}`.toUpperCase() + `: ${candidate[attribute]}`); // Output: FIRSTNAME: Muthu, LASTNAME: Annamalai
}
```
The property name was modified using the toUpperCase() method, followed by the property value. The for...in method is very useful for iterating through the properties of an object.

#### 3.2.4 How to iterate using Object.Keys() method

The Object.keys() method returns an array of an object's enumerable properties.

**keys() Syntax:**

`Object.keys(obj)`

```javascript
let Candidate = {
  name: "Muthu",
  age: 20
};
```

```javascript
// get all keys of Candidate
let std1 = Object.keys(Candidate);
console.log(std1); // Output: [ 'name', 'age']
```

#### 3.2.5 Understanding Inheritance

* Using inheritance, you can define classes that inherit all the functionality of their parents and add new functionality.
* A class can inherit all the methods and properties of another class by using class inheritance.
* A useful feature of inheritance is that it allows reusability of code.
* Class inheritance is achieved by using the extends keyword. For example

**Example:**

```javascript
// parent class
class Candidate { 
    constructor(name) {
        this.name = name;
    }
    greet() {
        console.log(`Hello World I am ${this.name}`);
    }
}
// inheriting parent class
class User extends Candidate {

}
let candidate1 = new Candidate('Muthu');
candidate1.greet(); // Output : Hello World I am Muthu
```

**Code Explanation:**

* In the example above, the Candidate class inherits all the methods and properties of the Person class. 
* Thus, the Candidate class now has a name property and a greet() method.
* Then, we accessed the greet() method of Candidate class by creating a candidate1 object

### 3.3 Using the function Constructor Method in JavaScript before the introduction of es6

* In JavaScript, the constructor method can also be utilized to create an object. 
* An object instance of the class is created by the method. 
* In this method, an object type is defined using the constructor method:

**Syntax:**

```javascript
function Constructor(property) {
this.property = property;}
let newObject = new Constructor('objectValue');
```

Following is a description of the parameters.

* Constructor: a method for initializing class objects.
* newObject: Represents An object that has just been created
* property: Describes the existing properties of an object
* objectValue: Identifies the value assigned to the object.

**Example:**

```javascript
// Example of creating an object using a constructor
function Class(name, age) {
    this.name = name;
    this.age = age;
}

let candidate1 = new Class('Muthu', 20);
let candidate2 = new Class('Annamalai', 25)
console.log(candidate1.name); // Output : Muthu
console.log(candidate2.name); // Output : Annamalai
```

**In this code:**

* A constructor is called by passing a property name and an age parameter.
* Then, two objects named candidate1 and candidate2 are created.
* By calling the constructor, various values can be assigned to them

### 3.4 Using Class Construtor after the introduction of ES6

* JavaScript ES6 supports the concept of classes. Using a class to create the object is quite similar to using a constructor. 
* In JavaScript, the methods are replaced with classes by providing the functionality in the ES6 version. 
* Below is the syntax for creating this method:

**Syntax**

```javascript
Class className{
    constructor(property) {
        this.property = property;
    }
}
let newObject = new className('objectValue');
```

In the above syntax:

* ClassName specifies the class name.
* Aftert the above step we will pass the property to the constructor.
* Then JavaScript assigns the objectValue to the newObject variable.

Example

```javascript
// An example of how to create an object using classes
class Student {
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }
}
let candidate1 = new Student('Muthu', 20);
let candidate2 = new Student('Annamalai', 25)
console.log(candidate1.name); // Output : Muthu
console.log(candidate2.age); // Output : 25
```

In this code:

* Class Student has two properties: name and age
* Additionally, two objects are created: candidate1 and candidate2.
* Then, candidate1 and candidate2 are assigned different values.
* Lastly, use JavaScript's console.log() method to display the information.

---
title: Prototypal Inheritance 
description: Intro to prototypal inheritance
duration: 600
card_type: cue_card
---

## 4. Prototypal Inheritance 

* In Javascript, prototypal inheritance is used to add methods and properties to objects. 
* It allows one object to inherit the properties and methods of another. 
* We typically use Object.getPrototypeOf and Object.setPrototypeOf to get and set the prototype of an object. 
* Nowadays, proto is used to set it in modern languages.

**Example:**

```javascript
let candidate = {
    fly: true,
    Cantalk() {
        return "Sorry, Can't talk";
    },
};

// Object User
let user = {
    CanCook: true,
    CanCode() {
        return "Can't Code";
    },
    //  Inheriting the properties and methods of candidate
    __proto__: candidate, 
};
// Printing on console the properties of candidate
console.log("Can a user fly: " + user.fly); // Output : Can a user fly: true
// Method of candidate
console.log("Can a user talk: " + user.Cantalk()); // Output: Can a user talk: Sorry, Can't talk
// Property of user
console.log("Can a user cook: " + user.CanCook); // Ouput : Can a user cook: true
// Method of user
console.log("Can a user code: " + user.CanCode()); // Output : Can a user code: Can't Code
```
